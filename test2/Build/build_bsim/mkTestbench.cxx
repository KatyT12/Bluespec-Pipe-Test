/*
 * Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
 * 
 * On Thu Oct  3 17:38:49 BST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTestbench.h"
#include "imported_BDPI_functions.h"


/* Literal declarations */
static unsigned int const UWide_literal_144_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
											    2863311530u,
											    2863311530u,
											    2863311530u,
											    43690u };
static tUWide const UWide_literal_144_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(144u,
									    UWide_literal_144_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr);
static unsigned int const UWide_literal_145_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
											    2863311530u,
											    2863311530u,
											    2863311530u,
											    43690u };
static tUWide const UWide_literal_145_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(145u,
									    UWide_literal_145_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr);


/* String declarations */
static std::string const __str_literal_1("BSV Predict IP: %d", 18u);
static std::string const __str_literal_2("BSV Update IP: %d, target : %d, taken: %d, Type %d:",
					 51u);
static std::string const __str_literal_3("Error: \"../testfsm.bsv\", line 70, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_testfsm_action_l70c29] and\n  [RL_testfsm_action_l72c15, RL_testfsm_action_l74c17,\n  RL_testfsm_action_l75c35, RL_testfsm_action_l76c33,\n  RL_testfsm_action_l79c17, RL_testfsm_action_l80c28] ) fired in the same\n  clock cycle.\n",
					 327u);
static std::string const __str_literal_4("Error: \"../testfsm.bsv\", line 72, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_testfsm_action_l72c15] and\n  [RL_testfsm_action_l74c17, RL_testfsm_action_l75c35,\n  RL_testfsm_action_l76c33, RL_testfsm_action_l79c17,\n  RL_testfsm_action_l80c28] ) fired in the same clock cycle.\n",
					 299u);
static std::string const __str_literal_5("Error: \"../testfsm.bsv\", line 74, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_testfsm_action_l74c17] and\n  [RL_testfsm_action_l75c35, RL_testfsm_action_l76c33,\n  RL_testfsm_action_l79c17, RL_testfsm_action_l80c28] ) fired in the same\n  clock cycle.\n",
					 273u);
static std::string const __str_literal_6("Error: \"../testfsm.bsv\", line 75, column 35: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_testfsm_action_l75c35] and\n  [RL_testfsm_action_l76c33, RL_testfsm_action_l79c17,\n  RL_testfsm_action_l80c28] ) fired in the same clock cycle.\n",
					 245u);
static std::string const __str_literal_7("Error: \"../testfsm.bsv\", line 76, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_testfsm_action_l76c33] and\n  [RL_testfsm_action_l79c17, RL_testfsm_action_l80c28] ) fired in the same\n  clock cycle.\n",
					 219u);
static std::string const __str_literal_8("Error: \"../testfsm.bsv\", line 79, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_testfsm_action_l79c17] and\n  [RL_testfsm_action_l80c28] ) fired in the same clock cycle.\n",
					 191u);


/* Constructor */
MOD_mkTestbench::MOD_mkTestbench(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_message(simHdl,
		 "message",
		 this,
		 145u,
		 UWide_literal_145_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
		 (tUInt8)0u),
    INST_pred(simHdl, "pred", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_prediction(simHdl, "prediction", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_testfsm_abort(simHdl, "testfsm_abort", this, 1u, (tUInt8)0u),
    INST_testfsm_start_reg(simHdl, "testfsm_start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_testfsm_start_reg_1(simHdl, "testfsm_start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_testfsm_start_reg_2(simHdl, "testfsm_start_reg_2", this, 1u, (tUInt8)0u),
    INST_testfsm_start_wire(simHdl, "testfsm_start_wire", this, 1u, (tUInt8)0u),
    INST_testfsm_state_can_overlap(simHdl,
				   "testfsm_state_can_overlap",
				   this,
				   1u,
				   (tUInt8)1u,
				   (tUInt8)0u),
    INST_testfsm_state_fired(simHdl, "testfsm_state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_testfsm_state_fired_1(simHdl, "testfsm_state_fired_1", this, 1u, (tUInt8)0u),
    INST_testfsm_state_mkFSMstate(simHdl, "testfsm_state_mkFSMstate", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_testfsm_state_overlap_pw(simHdl, "testfsm_state_overlap_pw", this, 0u),
    INST_testfsm_state_set_pw(simHdl, "testfsm_state_set_pw", this, 0u),
    INST_update(simHdl,
		"update",
		this,
		144u,
		UWide_literal_144_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa,
		(tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_message___d38(145u),
    DEF_TASK_recieve___d48(160u),
    DEF_update___d78(144u),
    DEF_TASK_recieve_8_BITS_145_TO_2___d51(144u),
    DEF_message_8_BITS_143_TO_0___d75(144u),
    DEF_IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58(144u),
    DEF_TASK_recieve_8_BITS_65_TO_2_2_CONCAT_TASK_reci_ETC___d57(144u),
    DEF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_CONCAT_IF__ETC___d59(145u),
    DEF_TASK_recieve_8_BITS_129_TO_66_3_CONCAT_TASK_re_ETC___d55(72u)
{
  symbol_count = 75u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTestbench::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_10", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_5", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_6", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_8", SYM_RULE);
  init_symbol(&symbols[5u], "__me_check_9", SYM_RULE);
  init_symbol(&symbols[6u], "CAN_FIRE___me_check_10", SYM_DEF, &DEF_CAN_FIRE___me_check_10, 1u);
  init_symbol(&symbols[7u], "CAN_FIRE___me_check_5", SYM_DEF, &DEF_CAN_FIRE___me_check_5, 1u);
  init_symbol(&symbols[8u], "CAN_FIRE___me_check_6", SYM_DEF, &DEF_CAN_FIRE___me_check_6, 1u);
  init_symbol(&symbols[9u], "CAN_FIRE___me_check_7", SYM_DEF, &DEF_CAN_FIRE___me_check_7, 1u);
  init_symbol(&symbols[10u], "CAN_FIRE___me_check_8", SYM_DEF, &DEF_CAN_FIRE___me_check_8, 1u);
  init_symbol(&symbols[11u], "CAN_FIRE___me_check_9", SYM_DEF, &DEF_CAN_FIRE___me_check_9, 1u);
  init_symbol(&symbols[12u], "CAN_FIRE_RL_init", SYM_DEF, &DEF_CAN_FIRE_RL_init, 1u);
  init_symbol(&symbols[13u],
	      "CAN_FIRE_RL_testfsm_action_l70c29",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_testfsm_action_l70c29,
	      1u);
  init_symbol(&symbols[14u],
	      "CAN_FIRE_RL_testfsm_action_l72c15",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_testfsm_action_l72c15,
	      1u);
  init_symbol(&symbols[15u],
	      "CAN_FIRE_RL_testfsm_action_l74c17",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_testfsm_action_l74c17,
	      1u);
  init_symbol(&symbols[16u],
	      "CAN_FIRE_RL_testfsm_action_l75c35",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_testfsm_action_l75c35,
	      1u);
  init_symbol(&symbols[17u],
	      "CAN_FIRE_RL_testfsm_action_l76c33",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_testfsm_action_l76c33,
	      1u);
  init_symbol(&symbols[18u],
	      "CAN_FIRE_RL_testfsm_action_l79c17",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_testfsm_action_l79c17,
	      1u);
  init_symbol(&symbols[19u],
	      "CAN_FIRE_RL_testfsm_action_l80c28",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_testfsm_action_l80c28,
	      1u);
  init_symbol(&symbols[20u],
	      "CAN_FIRE_RL_testfsm_fsm_start",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_testfsm_fsm_start,
	      1u);
  init_symbol(&symbols[21u],
	      "CAN_FIRE_RL_testfsm_restart",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_testfsm_restart,
	      1u);
  init_symbol(&symbols[22u],
	      "CAN_FIRE_RL_testfsm_start_reg__dreg_update",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_testfsm_start_reg__dreg_update,
	      1u);
  init_symbol(&symbols[23u],
	      "CAN_FIRE_RL_testfsm_state_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_testfsm_state_every,
	      1u);
  init_symbol(&symbols[24u],
	      "CAN_FIRE_RL_testfsm_state_fired__dreg_update",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_testfsm_state_fired__dreg_update,
	      1u);
  init_symbol(&symbols[25u],
	      "CAN_FIRE_RL_testfsm_state_handle_abort",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_testfsm_state_handle_abort,
	      1u);
  init_symbol(&symbols[26u], "message", SYM_MODULE, &INST_message);
  init_symbol(&symbols[27u], "pred", SYM_MODULE, &INST_pred);
  init_symbol(&symbols[28u], "prediction", SYM_MODULE, &INST_prediction);
  init_symbol(&symbols[29u], "RL_init", SYM_RULE);
  init_symbol(&symbols[30u], "RL_testfsm_action_l70c29", SYM_RULE);
  init_symbol(&symbols[31u], "RL_testfsm_action_l72c15", SYM_RULE);
  init_symbol(&symbols[32u], "RL_testfsm_action_l74c17", SYM_RULE);
  init_symbol(&symbols[33u], "RL_testfsm_action_l75c35", SYM_RULE);
  init_symbol(&symbols[34u], "RL_testfsm_action_l76c33", SYM_RULE);
  init_symbol(&symbols[35u], "RL_testfsm_action_l79c17", SYM_RULE);
  init_symbol(&symbols[36u], "RL_testfsm_action_l80c28", SYM_RULE);
  init_symbol(&symbols[37u], "RL_testfsm_fsm_start", SYM_RULE);
  init_symbol(&symbols[38u], "RL_testfsm_restart", SYM_RULE);
  init_symbol(&symbols[39u], "RL_testfsm_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[40u], "RL_testfsm_state_every", SYM_RULE);
  init_symbol(&symbols[41u], "RL_testfsm_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[42u], "RL_testfsm_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[43u], "testfsm_abort", SYM_MODULE, &INST_testfsm_abort);
  init_symbol(&symbols[44u], "testfsm_start_reg", SYM_MODULE, &INST_testfsm_start_reg);
  init_symbol(&symbols[45u], "testfsm_start_reg_1", SYM_MODULE, &INST_testfsm_start_reg_1);
  init_symbol(&symbols[46u], "testfsm_start_reg_2", SYM_MODULE, &INST_testfsm_start_reg_2);
  init_symbol(&symbols[47u], "testfsm_start_wire", SYM_MODULE, &INST_testfsm_start_wire);
  init_symbol(&symbols[48u],
	      "testfsm_state_can_overlap",
	      SYM_MODULE,
	      &INST_testfsm_state_can_overlap);
  init_symbol(&symbols[49u], "testfsm_state_fired", SYM_MODULE, &INST_testfsm_state_fired);
  init_symbol(&symbols[50u], "testfsm_state_fired_1", SYM_MODULE, &INST_testfsm_state_fired_1);
  init_symbol(&symbols[51u], "testfsm_state_mkFSMstate", SYM_MODULE, &INST_testfsm_state_mkFSMstate);
  init_symbol(&symbols[52u], "testfsm_state_overlap_pw", SYM_MODULE, &INST_testfsm_state_overlap_pw);
  init_symbol(&symbols[53u], "testfsm_state_set_pw", SYM_MODULE, &INST_testfsm_state_set_pw);
  init_symbol(&symbols[54u], "update", SYM_MODULE, &INST_update);
  init_symbol(&symbols[55u], "WILL_FIRE___me_check_10", SYM_DEF, &DEF_WILL_FIRE___me_check_10, 1u);
  init_symbol(&symbols[56u], "WILL_FIRE___me_check_5", SYM_DEF, &DEF_WILL_FIRE___me_check_5, 1u);
  init_symbol(&symbols[57u], "WILL_FIRE___me_check_6", SYM_DEF, &DEF_WILL_FIRE___me_check_6, 1u);
  init_symbol(&symbols[58u], "WILL_FIRE___me_check_7", SYM_DEF, &DEF_WILL_FIRE___me_check_7, 1u);
  init_symbol(&symbols[59u], "WILL_FIRE___me_check_8", SYM_DEF, &DEF_WILL_FIRE___me_check_8, 1u);
  init_symbol(&symbols[60u], "WILL_FIRE___me_check_9", SYM_DEF, &DEF_WILL_FIRE___me_check_9, 1u);
  init_symbol(&symbols[61u], "WILL_FIRE_RL_init", SYM_DEF, &DEF_WILL_FIRE_RL_init, 1u);
  init_symbol(&symbols[62u],
	      "WILL_FIRE_RL_testfsm_action_l70c29",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_testfsm_action_l70c29,
	      1u);
  init_symbol(&symbols[63u],
	      "WILL_FIRE_RL_testfsm_action_l72c15",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_testfsm_action_l72c15,
	      1u);
  init_symbol(&symbols[64u],
	      "WILL_FIRE_RL_testfsm_action_l74c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_testfsm_action_l74c17,
	      1u);
  init_symbol(&symbols[65u],
	      "WILL_FIRE_RL_testfsm_action_l75c35",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_testfsm_action_l75c35,
	      1u);
  init_symbol(&symbols[66u],
	      "WILL_FIRE_RL_testfsm_action_l76c33",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_testfsm_action_l76c33,
	      1u);
  init_symbol(&symbols[67u],
	      "WILL_FIRE_RL_testfsm_action_l79c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_testfsm_action_l79c17,
	      1u);
  init_symbol(&symbols[68u],
	      "WILL_FIRE_RL_testfsm_action_l80c28",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_testfsm_action_l80c28,
	      1u);
  init_symbol(&symbols[69u],
	      "WILL_FIRE_RL_testfsm_fsm_start",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_testfsm_fsm_start,
	      1u);
  init_symbol(&symbols[70u],
	      "WILL_FIRE_RL_testfsm_restart",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_testfsm_restart,
	      1u);
  init_symbol(&symbols[71u],
	      "WILL_FIRE_RL_testfsm_start_reg__dreg_update",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_testfsm_start_reg__dreg_update,
	      1u);
  init_symbol(&symbols[72u],
	      "WILL_FIRE_RL_testfsm_state_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_testfsm_state_every,
	      1u);
  init_symbol(&symbols[73u],
	      "WILL_FIRE_RL_testfsm_state_fired__dreg_update",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_testfsm_state_fired__dreg_update,
	      1u);
  init_symbol(&symbols[74u],
	      "WILL_FIRE_RL_testfsm_state_handle_abort",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_testfsm_state_handle_abort,
	      1u);
}


/* Rule actions */

void MOD_mkTestbench::RL_testfsm_start_reg__dreg_update()
{
  tUInt8 DEF_testfsm_start_reg_2_whas_AND_testfsm_start_reg_ETC___d3;
  DEF_testfsm_start_reg_2_whas_AND_testfsm_start_reg_ETC___d3 = INST_testfsm_start_reg_2.METH_whas() && INST_testfsm_start_reg_2.METH_wget();
  INST_testfsm_start_reg_1.METH_write(DEF_testfsm_start_reg_2_whas_AND_testfsm_start_reg_ETC___d3);
}

void MOD_mkTestbench::RL_testfsm_state_handle_abort()
{
  INST_testfsm_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTestbench::RL_testfsm_state_fired__dreg_update()
{
  tUInt8 DEF_testfsm_state_fired_1_whas__3_AND_testfsm_stat_ETC___d15;
  DEF_testfsm_state_fired_1_whas__3_AND_testfsm_stat_ETC___d15 = INST_testfsm_state_fired_1.METH_whas() && INST_testfsm_state_fired_1.METH_wget();
  INST_testfsm_state_fired.METH_write(DEF_testfsm_state_fired_1_whas__3_AND_testfsm_stat_ETC___d15);
}

void MOD_mkTestbench::RL_testfsm_state_every()
{
  tUInt8 DEF_testfsm_state_set_pw_whas__6_OR_NOT_testfsm_st_ETC___d21;
  tUInt8 DEF_testfsm_state_can_overlap__h3555;
  DEF_testfsm_state_can_overlap__h3555 = INST_testfsm_state_can_overlap.METH_read();
  DEF_testfsm_state_set_pw_whas__6_OR_NOT_testfsm_st_ETC___d21 = INST_testfsm_state_set_pw.METH_whas() || (!INST_testfsm_state_overlap_pw.METH_whas() && DEF_testfsm_state_can_overlap__h3555);
  INST_testfsm_state_can_overlap.METH_write(DEF_testfsm_state_set_pw_whas__6_OR_NOT_testfsm_st_ETC___d21);
}

void MOD_mkTestbench::RL_testfsm_restart()
{
  INST_testfsm_start_wire.METH_wset((tUInt8)1u);
  INST_testfsm_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTestbench::RL_testfsm_action_l70c29()
{
  INST_testfsm_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_testfsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_testfsm_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    set_file_descriptors();
}

void MOD_mkTestbench::RL_testfsm_action_l72c15()
{
  tUInt8 DEF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1___d50;
  INST_testfsm_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_testfsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_testfsm_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    recieve(DEF_TASK_recieve___d48.data);
  wop_primExtractWide(144u,
		      160u,
		      DEF_TASK_recieve___d48,
		      32u,
		      145u,
		      32u,
		      2u,
		      DEF_TASK_recieve_8_BITS_145_TO_2___d51);
  DEF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1___d50 = DEF_TASK_recieve___d48.get_bits_in_word8(0u,
											 0u,
											 2u) == (tUInt8)1u;
  DEF_TASK_recieve_8_BITS_129_TO_66_3_CONCAT_TASK_re_ETC___d55.set_bits_in_word(primExtract8(8u,
											     160u,
											     DEF_TASK_recieve___d48,
											     32u,
											     129u,
											     32u,
											     122u),
										2u,
										0u,
										8u).set_whole_word(primExtract32(32u,
														 160u,
														 DEF_TASK_recieve___d48,
														 32u,
														 121u,
														 32u,
														 90u),
												   1u).set_whole_word((DEF_TASK_recieve___d48.get_bits_in_word32(2u,
																				 2u,
																				 24u) << 8u) | (tUInt32)(DEF_TASK_recieve___d48.get_bits_in_word8(4u,
																												  2u,
																												  8u)),
														      0u);
  DEF_TASK_recieve_8_BITS_65_TO_2_2_CONCAT_TASK_reci_ETC___d57.set_bits_in_word(primExtract32(16u,
											      160u,
											      DEF_TASK_recieve___d48,
											      32u,
											      65u,
											      32u,
											      50u),
										4u,
										0u,
										16u).set_whole_word(primExtract32(32u,
														  160u,
														  DEF_TASK_recieve___d48,
														  32u,
														  49u,
														  32u,
														  18u),
												    3u).set_whole_word((DEF_TASK_recieve___d48.get_bits_in_word32(0u,
																				  2u,
																				  16u) << 16u) | primExtract32(16u,
																							       72u,
																							       DEF_TASK_recieve_8_BITS_129_TO_66_3_CONCAT_TASK_re_ETC___d55,
																							       32u,
																							       71u,
																							       32u,
																							       56u),
														       2u).set_whole_word(primExtract32(32u,
																			72u,
																			DEF_TASK_recieve_8_BITS_129_TO_66_3_CONCAT_TASK_re_ETC___d55,
																			32u,
																			55u,
																			32u,
																			24u),
																	  1u).set_whole_word((DEF_TASK_recieve_8_BITS_129_TO_66_3_CONCAT_TASK_re_ETC___d55.get_bits_in_word32(0u,
																													      0u,
																													      24u) << 8u) | (tUInt32)(DEF_TASK_recieve___d48.get_bits_in_word8(4u,
																																					       10u,
																																					       8u)),
																			     0u);
  DEF_IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58 = DEF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1___d50 ? DEF_TASK_recieve_8_BITS_145_TO_2___d51 : DEF_TASK_recieve_8_BITS_65_TO_2_2_CONCAT_TASK_reci_ETC___d57;
  DEF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_CONCAT_IF__ETC___d59.set_bits_in_word(131071u & ((((tUInt32)(DEF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1___d50)) << 16u) | DEF_IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58.get_bits_in_word32(4u,
																													       0u,
																													       16u)),
										4u,
										0u,
										17u).set_whole_word(DEF_IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58.get_whole_word(3u),
												    3u).set_whole_word(DEF_IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58.get_whole_word(2u),
														       2u).set_whole_word(DEF_IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58.get_whole_word(1u),
																	  1u).set_whole_word(DEF_IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58.get_whole_word(0u),
																			     0u);
  INST_message.METH_write(DEF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_CONCAT_IF__ETC___d59);
}

void MOD_mkTestbench::RL_testfsm_action_l74c17()
{
  INST_testfsm_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_testfsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_testfsm_state_set_pw.METH_wset();
  INST_prediction.METH_write((tUInt8)1u);
}

void MOD_mkTestbench::RL_testfsm_action_l75c35()
{
  tUInt64 DEF_unsigned_IF_message_8_BIT_144_9_THEN_message__ETC___d67;
  DEF_message___d38 = INST_message.METH_read();
  DEF_unsigned_IF_message_8_BIT_144_9_THEN_message__ETC___d67 = primExtract64(64u,
									      145u,
									      DEF_message___d38,
									      32u,
									      63u,
									      32u,
									      0u);
  INST_testfsm_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_testfsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_testfsm_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,64",
		   &__str_literal_1,
		   DEF_unsigned_IF_message_8_BIT_144_9_THEN_message__ETC___d67);
}

void MOD_mkTestbench::RL_testfsm_action_l76c33()
{
  tUInt8 DEF_prediction___d70;
  DEF_prediction___d70 = INST_prediction.METH_read();
  INST_testfsm_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_testfsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_testfsm_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    branch_pred_resp(DEF_prediction___d70);
}

void MOD_mkTestbench::RL_testfsm_action_l79c17()
{
  DEF_message___d38 = INST_message.METH_read();
  wop_primExtractWide(144u,
		      145u,
		      DEF_message___d38,
		      32u,
		      143u,
		      32u,
		      0u,
		      DEF_message_8_BITS_143_TO_0___d75);
  INST_testfsm_state_mkFSMstate.METH_write((tUInt8)6u);
  INST_testfsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_testfsm_state_set_pw.METH_wset();
  INST_update.METH_write(DEF_message_8_BITS_143_TO_0___d75);
}

void MOD_mkTestbench::RL_testfsm_action_l80c28()
{
  tUInt8 DEF_unsigned_update_8_BITS_7_TO_0_5___d86;
  tUInt8 DEF_unsigned_update_8_BITS_15_TO_8_3___d84;
  tUInt64 DEF_unsigned_update_8_BITS_143_TO_80_9___d80;
  tUInt64 DEF_unsigned_update_8_BITS_79_TO_16_1___d82;
  DEF_update___d78 = INST_update.METH_read();
  DEF_unsigned_update_8_BITS_79_TO_16_1___d82 = primExtract64(64u,
							      144u,
							      DEF_update___d78,
							      32u,
							      79u,
							      32u,
							      16u);
  DEF_unsigned_update_8_BITS_143_TO_80_9___d80 = primExtract64(64u,
							       144u,
							       DEF_update___d78,
							       32u,
							       143u,
							       32u,
							       80u);
  DEF_unsigned_update_8_BITS_15_TO_8_3___d84 = DEF_update___d78.get_bits_in_word8(0u, 8u, 8u);
  DEF_unsigned_update_8_BITS_7_TO_0_5___d86 = DEF_update___d78.get_bits_in_word8(0u, 0u, 8u);
  INST_testfsm_state_mkFSMstate.METH_write((tUInt8)7u);
  INST_testfsm_state_fired_1.METH_wset((tUInt8)1u);
  INST_testfsm_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl,
		   this,
		   "s,64,64,8,8",
		   &__str_literal_2,
		   DEF_unsigned_update_8_BITS_143_TO_80_9___d80,
		   DEF_unsigned_update_8_BITS_79_TO_16_1___d82,
		   DEF_unsigned_update_8_BITS_15_TO_8_3___d84,
		   DEF_unsigned_update_8_BITS_7_TO_0_5___d86);
}

void MOD_mkTestbench::RL_testfsm_fsm_start()
{
  INST_testfsm_start_wire.METH_wset((tUInt8)1u);
  INST_testfsm_start_reg_2.METH_wset((tUInt8)1u);
  INST_testfsm_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkTestbench::RL_init()
{
  INST_testfsm_start_reg.METH_write((tUInt8)1u);
}

void MOD_mkTestbench::__me_check_5()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_testfsm_action_l70c29 && (((((DEF_WILL_FIRE_RL_testfsm_action_l72c15 || DEF_WILL_FIRE_RL_testfsm_action_l74c17) || DEF_WILL_FIRE_RL_testfsm_action_l75c35) || DEF_WILL_FIRE_RL_testfsm_action_l76c33) || DEF_WILL_FIRE_RL_testfsm_action_l79c17) || DEF_WILL_FIRE_RL_testfsm_action_l80c28))
      dollar_error(sim_hdl, this, "s", &__str_literal_3);
}

void MOD_mkTestbench::__me_check_6()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_testfsm_action_l72c15 && ((((DEF_WILL_FIRE_RL_testfsm_action_l74c17 || DEF_WILL_FIRE_RL_testfsm_action_l75c35) || DEF_WILL_FIRE_RL_testfsm_action_l76c33) || DEF_WILL_FIRE_RL_testfsm_action_l79c17) || DEF_WILL_FIRE_RL_testfsm_action_l80c28))
      dollar_error(sim_hdl, this, "s", &__str_literal_4);
}

void MOD_mkTestbench::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_testfsm_action_l74c17 && (((DEF_WILL_FIRE_RL_testfsm_action_l75c35 || DEF_WILL_FIRE_RL_testfsm_action_l76c33) || DEF_WILL_FIRE_RL_testfsm_action_l79c17) || DEF_WILL_FIRE_RL_testfsm_action_l80c28))
      dollar_error(sim_hdl, this, "s", &__str_literal_5);
}

void MOD_mkTestbench::__me_check_8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_testfsm_action_l75c35 && ((DEF_WILL_FIRE_RL_testfsm_action_l76c33 || DEF_WILL_FIRE_RL_testfsm_action_l79c17) || DEF_WILL_FIRE_RL_testfsm_action_l80c28))
      dollar_error(sim_hdl, this, "s", &__str_literal_6);
}

void MOD_mkTestbench::__me_check_9()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_testfsm_action_l76c33 && (DEF_WILL_FIRE_RL_testfsm_action_l79c17 || DEF_WILL_FIRE_RL_testfsm_action_l80c28))
      dollar_error(sim_hdl, this, "s", &__str_literal_7);
}

void MOD_mkTestbench::__me_check_10()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_testfsm_action_l79c17 && DEF_WILL_FIRE_RL_testfsm_action_l80c28)
      dollar_error(sim_hdl, this, "s", &__str_literal_8);
}


/* Methods */


/* Reset routines */

void MOD_mkTestbench::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_update.reset_RST(ARG_rst_in);
  INST_testfsm_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_testfsm_state_fired.reset_RST(ARG_rst_in);
  INST_testfsm_state_can_overlap.reset_RST(ARG_rst_in);
  INST_testfsm_start_reg_1.reset_RST(ARG_rst_in);
  INST_testfsm_start_reg.reset_RST(ARG_rst_in);
  INST_prediction.reset_RST(ARG_rst_in);
  INST_pred.reset_RST(ARG_rst_in);
  INST_message.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTestbench::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTestbench::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_message.dump_state(indent + 2u);
  INST_pred.dump_state(indent + 2u);
  INST_prediction.dump_state(indent + 2u);
  INST_testfsm_abort.dump_state(indent + 2u);
  INST_testfsm_start_reg.dump_state(indent + 2u);
  INST_testfsm_start_reg_1.dump_state(indent + 2u);
  INST_testfsm_start_reg_2.dump_state(indent + 2u);
  INST_testfsm_start_wire.dump_state(indent + 2u);
  INST_testfsm_state_can_overlap.dump_state(indent + 2u);
  INST_testfsm_state_fired.dump_state(indent + 2u);
  INST_testfsm_state_fired_1.dump_state(indent + 2u);
  INST_testfsm_state_mkFSMstate.dump_state(indent + 2u);
  INST_testfsm_state_overlap_pw.dump_state(indent + 2u);
  INST_testfsm_state_set_pw.dump_state(indent + 2u);
  INST_update.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTestbench::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 65u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_init", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_testfsm_action_l70c29", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_testfsm_action_l72c15", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_testfsm_action_l74c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_testfsm_action_l75c35", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_testfsm_action_l76c33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_testfsm_action_l79c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_testfsm_action_l80c28", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_testfsm_fsm_start", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_testfsm_restart", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_testfsm_start_reg__dreg_update", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_testfsm_state_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_testfsm_state_fired__dreg_update", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_testfsm_state_handle_abort", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_10", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_5", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_7", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_8", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE___me_check_9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58", 144u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_recieve_8_BITS_129_TO_66_3_CONCAT_TASK_re_ETC___d55", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_recieve_8_BITS_145_TO_2___d51", 144u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_CONCAT_IF__ETC___d59", 145u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_recieve_8_BITS_65_TO_2_2_CONCAT_TASK_reci_ETC___d57", 144u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_recieve___d48", 160u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_init", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_testfsm_action_l70c29", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_testfsm_action_l72c15", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_testfsm_action_l74c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_testfsm_action_l75c35", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_testfsm_action_l76c33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_testfsm_action_l79c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_testfsm_action_l80c28", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_testfsm_fsm_start", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_testfsm_restart", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_testfsm_start_reg__dreg_update", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_testfsm_state_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_testfsm_state_fired__dreg_update", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_testfsm_state_handle_abort", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_10", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_5", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_7", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_8", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE___me_check_9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "message_8_BITS_143_TO_0___d75", 144u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "message___d38", 145u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "update___d78", 144u);
  num = INST_message.dump_VCD_defs(num);
  num = INST_pred.dump_VCD_defs(num);
  num = INST_prediction.dump_VCD_defs(num);
  num = INST_testfsm_abort.dump_VCD_defs(num);
  num = INST_testfsm_start_reg.dump_VCD_defs(num);
  num = INST_testfsm_start_reg_1.dump_VCD_defs(num);
  num = INST_testfsm_start_reg_2.dump_VCD_defs(num);
  num = INST_testfsm_start_wire.dump_VCD_defs(num);
  num = INST_testfsm_state_can_overlap.dump_VCD_defs(num);
  num = INST_testfsm_state_fired.dump_VCD_defs(num);
  num = INST_testfsm_state_fired_1.dump_VCD_defs(num);
  num = INST_testfsm_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_testfsm_state_overlap_pw.dump_VCD_defs(num);
  num = INST_testfsm_state_set_pw.dump_VCD_defs(num);
  num = INST_update.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTestbench::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTestbench &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTestbench::vcd_defs(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 144u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 144u);
    vcd_write_x(sim_hdl, num++, 145u);
    vcd_write_x(sim_hdl, num++, 144u);
    vcd_write_x(sim_hdl, num++, 160u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 144u);
    vcd_write_x(sim_hdl, num++, 145u);
    vcd_write_x(sim_hdl, num++, 144u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_init) != DEF_CAN_FIRE_RL_init)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_init, 1u);
	backing.DEF_CAN_FIRE_RL_init = DEF_CAN_FIRE_RL_init;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_testfsm_action_l70c29) != DEF_CAN_FIRE_RL_testfsm_action_l70c29)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_testfsm_action_l70c29, 1u);
	backing.DEF_CAN_FIRE_RL_testfsm_action_l70c29 = DEF_CAN_FIRE_RL_testfsm_action_l70c29;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_testfsm_action_l72c15) != DEF_CAN_FIRE_RL_testfsm_action_l72c15)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_testfsm_action_l72c15, 1u);
	backing.DEF_CAN_FIRE_RL_testfsm_action_l72c15 = DEF_CAN_FIRE_RL_testfsm_action_l72c15;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_testfsm_action_l74c17) != DEF_CAN_FIRE_RL_testfsm_action_l74c17)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_testfsm_action_l74c17, 1u);
	backing.DEF_CAN_FIRE_RL_testfsm_action_l74c17 = DEF_CAN_FIRE_RL_testfsm_action_l74c17;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_testfsm_action_l75c35) != DEF_CAN_FIRE_RL_testfsm_action_l75c35)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_testfsm_action_l75c35, 1u);
	backing.DEF_CAN_FIRE_RL_testfsm_action_l75c35 = DEF_CAN_FIRE_RL_testfsm_action_l75c35;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_testfsm_action_l76c33) != DEF_CAN_FIRE_RL_testfsm_action_l76c33)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_testfsm_action_l76c33, 1u);
	backing.DEF_CAN_FIRE_RL_testfsm_action_l76c33 = DEF_CAN_FIRE_RL_testfsm_action_l76c33;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_testfsm_action_l79c17) != DEF_CAN_FIRE_RL_testfsm_action_l79c17)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_testfsm_action_l79c17, 1u);
	backing.DEF_CAN_FIRE_RL_testfsm_action_l79c17 = DEF_CAN_FIRE_RL_testfsm_action_l79c17;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_testfsm_action_l80c28) != DEF_CAN_FIRE_RL_testfsm_action_l80c28)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_testfsm_action_l80c28, 1u);
	backing.DEF_CAN_FIRE_RL_testfsm_action_l80c28 = DEF_CAN_FIRE_RL_testfsm_action_l80c28;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_testfsm_fsm_start) != DEF_CAN_FIRE_RL_testfsm_fsm_start)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_testfsm_fsm_start, 1u);
	backing.DEF_CAN_FIRE_RL_testfsm_fsm_start = DEF_CAN_FIRE_RL_testfsm_fsm_start;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_testfsm_restart) != DEF_CAN_FIRE_RL_testfsm_restart)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_testfsm_restart, 1u);
	backing.DEF_CAN_FIRE_RL_testfsm_restart = DEF_CAN_FIRE_RL_testfsm_restart;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_testfsm_start_reg__dreg_update) != DEF_CAN_FIRE_RL_testfsm_start_reg__dreg_update)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_testfsm_start_reg__dreg_update, 1u);
	backing.DEF_CAN_FIRE_RL_testfsm_start_reg__dreg_update = DEF_CAN_FIRE_RL_testfsm_start_reg__dreg_update;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_testfsm_state_every) != DEF_CAN_FIRE_RL_testfsm_state_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_testfsm_state_every, 1u);
	backing.DEF_CAN_FIRE_RL_testfsm_state_every = DEF_CAN_FIRE_RL_testfsm_state_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_testfsm_state_fired__dreg_update) != DEF_CAN_FIRE_RL_testfsm_state_fired__dreg_update)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_testfsm_state_fired__dreg_update, 1u);
	backing.DEF_CAN_FIRE_RL_testfsm_state_fired__dreg_update = DEF_CAN_FIRE_RL_testfsm_state_fired__dreg_update;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_testfsm_state_handle_abort) != DEF_CAN_FIRE_RL_testfsm_state_handle_abort)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_testfsm_state_handle_abort, 1u);
	backing.DEF_CAN_FIRE_RL_testfsm_state_handle_abort = DEF_CAN_FIRE_RL_testfsm_state_handle_abort;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_10) != DEF_CAN_FIRE___me_check_10)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_10, 1u);
	backing.DEF_CAN_FIRE___me_check_10 = DEF_CAN_FIRE___me_check_10;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_5) != DEF_CAN_FIRE___me_check_5)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_5, 1u);
	backing.DEF_CAN_FIRE___me_check_5 = DEF_CAN_FIRE___me_check_5;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_6) != DEF_CAN_FIRE___me_check_6)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_6, 1u);
	backing.DEF_CAN_FIRE___me_check_6 = DEF_CAN_FIRE___me_check_6;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_7) != DEF_CAN_FIRE___me_check_7)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_7, 1u);
	backing.DEF_CAN_FIRE___me_check_7 = DEF_CAN_FIRE___me_check_7;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_8) != DEF_CAN_FIRE___me_check_8)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_8, 1u);
	backing.DEF_CAN_FIRE___me_check_8 = DEF_CAN_FIRE___me_check_8;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE___me_check_9) != DEF_CAN_FIRE___me_check_9)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE___me_check_9, 1u);
	backing.DEF_CAN_FIRE___me_check_9 = DEF_CAN_FIRE___me_check_9;
      }
      ++num;
      if ((backing.DEF_IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58) != DEF_IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58, 144u);
	backing.DEF_IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58 = DEF_IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_TASK_recieve_8_BITS_129_TO_66_3_CONCAT_TASK_re_ETC___d55) != DEF_TASK_recieve_8_BITS_129_TO_66_3_CONCAT_TASK_re_ETC___d55)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_recieve_8_BITS_129_TO_66_3_CONCAT_TASK_re_ETC___d55, 72u);
	backing.DEF_TASK_recieve_8_BITS_129_TO_66_3_CONCAT_TASK_re_ETC___d55 = DEF_TASK_recieve_8_BITS_129_TO_66_3_CONCAT_TASK_re_ETC___d55;
      }
      ++num;
      if ((backing.DEF_TASK_recieve_8_BITS_145_TO_2___d51) != DEF_TASK_recieve_8_BITS_145_TO_2___d51)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_recieve_8_BITS_145_TO_2___d51, 144u);
	backing.DEF_TASK_recieve_8_BITS_145_TO_2___d51 = DEF_TASK_recieve_8_BITS_145_TO_2___d51;
      }
      ++num;
      if ((backing.DEF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_CONCAT_IF__ETC___d59) != DEF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_CONCAT_IF__ETC___d59)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_CONCAT_IF__ETC___d59, 145u);
	backing.DEF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_CONCAT_IF__ETC___d59 = DEF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_CONCAT_IF__ETC___d59;
      }
      ++num;
      if ((backing.DEF_TASK_recieve_8_BITS_65_TO_2_2_CONCAT_TASK_reci_ETC___d57) != DEF_TASK_recieve_8_BITS_65_TO_2_2_CONCAT_TASK_reci_ETC___d57)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_recieve_8_BITS_65_TO_2_2_CONCAT_TASK_reci_ETC___d57, 144u);
	backing.DEF_TASK_recieve_8_BITS_65_TO_2_2_CONCAT_TASK_reci_ETC___d57 = DEF_TASK_recieve_8_BITS_65_TO_2_2_CONCAT_TASK_reci_ETC___d57;
      }
      ++num;
      if ((backing.DEF_TASK_recieve___d48) != DEF_TASK_recieve___d48)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_recieve___d48, 160u);
	backing.DEF_TASK_recieve___d48 = DEF_TASK_recieve___d48;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_init) != DEF_WILL_FIRE_RL_init)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_init, 1u);
	backing.DEF_WILL_FIRE_RL_init = DEF_WILL_FIRE_RL_init;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_testfsm_action_l70c29) != DEF_WILL_FIRE_RL_testfsm_action_l70c29)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_testfsm_action_l70c29, 1u);
	backing.DEF_WILL_FIRE_RL_testfsm_action_l70c29 = DEF_WILL_FIRE_RL_testfsm_action_l70c29;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_testfsm_action_l72c15) != DEF_WILL_FIRE_RL_testfsm_action_l72c15)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_testfsm_action_l72c15, 1u);
	backing.DEF_WILL_FIRE_RL_testfsm_action_l72c15 = DEF_WILL_FIRE_RL_testfsm_action_l72c15;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_testfsm_action_l74c17) != DEF_WILL_FIRE_RL_testfsm_action_l74c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_testfsm_action_l74c17, 1u);
	backing.DEF_WILL_FIRE_RL_testfsm_action_l74c17 = DEF_WILL_FIRE_RL_testfsm_action_l74c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_testfsm_action_l75c35) != DEF_WILL_FIRE_RL_testfsm_action_l75c35)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_testfsm_action_l75c35, 1u);
	backing.DEF_WILL_FIRE_RL_testfsm_action_l75c35 = DEF_WILL_FIRE_RL_testfsm_action_l75c35;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_testfsm_action_l76c33) != DEF_WILL_FIRE_RL_testfsm_action_l76c33)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_testfsm_action_l76c33, 1u);
	backing.DEF_WILL_FIRE_RL_testfsm_action_l76c33 = DEF_WILL_FIRE_RL_testfsm_action_l76c33;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_testfsm_action_l79c17) != DEF_WILL_FIRE_RL_testfsm_action_l79c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_testfsm_action_l79c17, 1u);
	backing.DEF_WILL_FIRE_RL_testfsm_action_l79c17 = DEF_WILL_FIRE_RL_testfsm_action_l79c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_testfsm_action_l80c28) != DEF_WILL_FIRE_RL_testfsm_action_l80c28)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_testfsm_action_l80c28, 1u);
	backing.DEF_WILL_FIRE_RL_testfsm_action_l80c28 = DEF_WILL_FIRE_RL_testfsm_action_l80c28;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_testfsm_fsm_start) != DEF_WILL_FIRE_RL_testfsm_fsm_start)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_testfsm_fsm_start, 1u);
	backing.DEF_WILL_FIRE_RL_testfsm_fsm_start = DEF_WILL_FIRE_RL_testfsm_fsm_start;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_testfsm_restart) != DEF_WILL_FIRE_RL_testfsm_restart)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_testfsm_restart, 1u);
	backing.DEF_WILL_FIRE_RL_testfsm_restart = DEF_WILL_FIRE_RL_testfsm_restart;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_testfsm_start_reg__dreg_update) != DEF_WILL_FIRE_RL_testfsm_start_reg__dreg_update)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_testfsm_start_reg__dreg_update, 1u);
	backing.DEF_WILL_FIRE_RL_testfsm_start_reg__dreg_update = DEF_WILL_FIRE_RL_testfsm_start_reg__dreg_update;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_testfsm_state_every) != DEF_WILL_FIRE_RL_testfsm_state_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_testfsm_state_every, 1u);
	backing.DEF_WILL_FIRE_RL_testfsm_state_every = DEF_WILL_FIRE_RL_testfsm_state_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_testfsm_state_fired__dreg_update) != DEF_WILL_FIRE_RL_testfsm_state_fired__dreg_update)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_testfsm_state_fired__dreg_update, 1u);
	backing.DEF_WILL_FIRE_RL_testfsm_state_fired__dreg_update = DEF_WILL_FIRE_RL_testfsm_state_fired__dreg_update;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_testfsm_state_handle_abort) != DEF_WILL_FIRE_RL_testfsm_state_handle_abort)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_testfsm_state_handle_abort, 1u);
	backing.DEF_WILL_FIRE_RL_testfsm_state_handle_abort = DEF_WILL_FIRE_RL_testfsm_state_handle_abort;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_10) != DEF_WILL_FIRE___me_check_10)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_10, 1u);
	backing.DEF_WILL_FIRE___me_check_10 = DEF_WILL_FIRE___me_check_10;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_5) != DEF_WILL_FIRE___me_check_5)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_5, 1u);
	backing.DEF_WILL_FIRE___me_check_5 = DEF_WILL_FIRE___me_check_5;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_6) != DEF_WILL_FIRE___me_check_6)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_6, 1u);
	backing.DEF_WILL_FIRE___me_check_6 = DEF_WILL_FIRE___me_check_6;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_7) != DEF_WILL_FIRE___me_check_7)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_7, 1u);
	backing.DEF_WILL_FIRE___me_check_7 = DEF_WILL_FIRE___me_check_7;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_8) != DEF_WILL_FIRE___me_check_8)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_8, 1u);
	backing.DEF_WILL_FIRE___me_check_8 = DEF_WILL_FIRE___me_check_8;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE___me_check_9) != DEF_WILL_FIRE___me_check_9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE___me_check_9, 1u);
	backing.DEF_WILL_FIRE___me_check_9 = DEF_WILL_FIRE___me_check_9;
      }
      ++num;
      if ((backing.DEF_message_8_BITS_143_TO_0___d75) != DEF_message_8_BITS_143_TO_0___d75)
      {
	vcd_write_val(sim_hdl, num, DEF_message_8_BITS_143_TO_0___d75, 144u);
	backing.DEF_message_8_BITS_143_TO_0___d75 = DEF_message_8_BITS_143_TO_0___d75;
      }
      ++num;
      if ((backing.DEF_message___d38) != DEF_message___d38)
      {
	vcd_write_val(sim_hdl, num, DEF_message___d38, 145u);
	backing.DEF_message___d38 = DEF_message___d38;
      }
      ++num;
      if ((backing.DEF_update___d78) != DEF_update___d78)
      {
	vcd_write_val(sim_hdl, num, DEF_update___d78, 144u);
	backing.DEF_update___d78 = DEF_update___d78;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_init, 1u);
      backing.DEF_CAN_FIRE_RL_init = DEF_CAN_FIRE_RL_init;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_testfsm_action_l70c29, 1u);
      backing.DEF_CAN_FIRE_RL_testfsm_action_l70c29 = DEF_CAN_FIRE_RL_testfsm_action_l70c29;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_testfsm_action_l72c15, 1u);
      backing.DEF_CAN_FIRE_RL_testfsm_action_l72c15 = DEF_CAN_FIRE_RL_testfsm_action_l72c15;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_testfsm_action_l74c17, 1u);
      backing.DEF_CAN_FIRE_RL_testfsm_action_l74c17 = DEF_CAN_FIRE_RL_testfsm_action_l74c17;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_testfsm_action_l75c35, 1u);
      backing.DEF_CAN_FIRE_RL_testfsm_action_l75c35 = DEF_CAN_FIRE_RL_testfsm_action_l75c35;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_testfsm_action_l76c33, 1u);
      backing.DEF_CAN_FIRE_RL_testfsm_action_l76c33 = DEF_CAN_FIRE_RL_testfsm_action_l76c33;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_testfsm_action_l79c17, 1u);
      backing.DEF_CAN_FIRE_RL_testfsm_action_l79c17 = DEF_CAN_FIRE_RL_testfsm_action_l79c17;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_testfsm_action_l80c28, 1u);
      backing.DEF_CAN_FIRE_RL_testfsm_action_l80c28 = DEF_CAN_FIRE_RL_testfsm_action_l80c28;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_testfsm_fsm_start, 1u);
      backing.DEF_CAN_FIRE_RL_testfsm_fsm_start = DEF_CAN_FIRE_RL_testfsm_fsm_start;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_testfsm_restart, 1u);
      backing.DEF_CAN_FIRE_RL_testfsm_restart = DEF_CAN_FIRE_RL_testfsm_restart;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_testfsm_start_reg__dreg_update, 1u);
      backing.DEF_CAN_FIRE_RL_testfsm_start_reg__dreg_update = DEF_CAN_FIRE_RL_testfsm_start_reg__dreg_update;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_testfsm_state_every, 1u);
      backing.DEF_CAN_FIRE_RL_testfsm_state_every = DEF_CAN_FIRE_RL_testfsm_state_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_testfsm_state_fired__dreg_update, 1u);
      backing.DEF_CAN_FIRE_RL_testfsm_state_fired__dreg_update = DEF_CAN_FIRE_RL_testfsm_state_fired__dreg_update;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_testfsm_state_handle_abort, 1u);
      backing.DEF_CAN_FIRE_RL_testfsm_state_handle_abort = DEF_CAN_FIRE_RL_testfsm_state_handle_abort;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_10, 1u);
      backing.DEF_CAN_FIRE___me_check_10 = DEF_CAN_FIRE___me_check_10;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_5, 1u);
      backing.DEF_CAN_FIRE___me_check_5 = DEF_CAN_FIRE___me_check_5;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_6, 1u);
      backing.DEF_CAN_FIRE___me_check_6 = DEF_CAN_FIRE___me_check_6;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_7, 1u);
      backing.DEF_CAN_FIRE___me_check_7 = DEF_CAN_FIRE___me_check_7;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_8, 1u);
      backing.DEF_CAN_FIRE___me_check_8 = DEF_CAN_FIRE___me_check_8;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE___me_check_9, 1u);
      backing.DEF_CAN_FIRE___me_check_9 = DEF_CAN_FIRE___me_check_9;
      vcd_write_val(sim_hdl, num++, DEF_IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58, 144u);
      backing.DEF_IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58 = DEF_IF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_THEN_TA_ETC___d58;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_TASK_recieve_8_BITS_129_TO_66_3_CONCAT_TASK_re_ETC___d55, 72u);
      backing.DEF_TASK_recieve_8_BITS_129_TO_66_3_CONCAT_TASK_re_ETC___d55 = DEF_TASK_recieve_8_BITS_129_TO_66_3_CONCAT_TASK_re_ETC___d55;
      vcd_write_val(sim_hdl, num++, DEF_TASK_recieve_8_BITS_145_TO_2___d51, 144u);
      backing.DEF_TASK_recieve_8_BITS_145_TO_2___d51 = DEF_TASK_recieve_8_BITS_145_TO_2___d51;
      vcd_write_val(sim_hdl, num++, DEF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_CONCAT_IF__ETC___d59, 145u);
      backing.DEF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_CONCAT_IF__ETC___d59 = DEF_TASK_recieve_8_BITS_1_TO_0_9_EQ_1_0_CONCAT_IF__ETC___d59;
      vcd_write_val(sim_hdl, num++, DEF_TASK_recieve_8_BITS_65_TO_2_2_CONCAT_TASK_reci_ETC___d57, 144u);
      backing.DEF_TASK_recieve_8_BITS_65_TO_2_2_CONCAT_TASK_reci_ETC___d57 = DEF_TASK_recieve_8_BITS_65_TO_2_2_CONCAT_TASK_reci_ETC___d57;
      vcd_write_val(sim_hdl, num++, DEF_TASK_recieve___d48, 160u);
      backing.DEF_TASK_recieve___d48 = DEF_TASK_recieve___d48;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_init, 1u);
      backing.DEF_WILL_FIRE_RL_init = DEF_WILL_FIRE_RL_init;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_testfsm_action_l70c29, 1u);
      backing.DEF_WILL_FIRE_RL_testfsm_action_l70c29 = DEF_WILL_FIRE_RL_testfsm_action_l70c29;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_testfsm_action_l72c15, 1u);
      backing.DEF_WILL_FIRE_RL_testfsm_action_l72c15 = DEF_WILL_FIRE_RL_testfsm_action_l72c15;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_testfsm_action_l74c17, 1u);
      backing.DEF_WILL_FIRE_RL_testfsm_action_l74c17 = DEF_WILL_FIRE_RL_testfsm_action_l74c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_testfsm_action_l75c35, 1u);
      backing.DEF_WILL_FIRE_RL_testfsm_action_l75c35 = DEF_WILL_FIRE_RL_testfsm_action_l75c35;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_testfsm_action_l76c33, 1u);
      backing.DEF_WILL_FIRE_RL_testfsm_action_l76c33 = DEF_WILL_FIRE_RL_testfsm_action_l76c33;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_testfsm_action_l79c17, 1u);
      backing.DEF_WILL_FIRE_RL_testfsm_action_l79c17 = DEF_WILL_FIRE_RL_testfsm_action_l79c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_testfsm_action_l80c28, 1u);
      backing.DEF_WILL_FIRE_RL_testfsm_action_l80c28 = DEF_WILL_FIRE_RL_testfsm_action_l80c28;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_testfsm_fsm_start, 1u);
      backing.DEF_WILL_FIRE_RL_testfsm_fsm_start = DEF_WILL_FIRE_RL_testfsm_fsm_start;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_testfsm_restart, 1u);
      backing.DEF_WILL_FIRE_RL_testfsm_restart = DEF_WILL_FIRE_RL_testfsm_restart;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_testfsm_start_reg__dreg_update, 1u);
      backing.DEF_WILL_FIRE_RL_testfsm_start_reg__dreg_update = DEF_WILL_FIRE_RL_testfsm_start_reg__dreg_update;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_testfsm_state_every, 1u);
      backing.DEF_WILL_FIRE_RL_testfsm_state_every = DEF_WILL_FIRE_RL_testfsm_state_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_testfsm_state_fired__dreg_update, 1u);
      backing.DEF_WILL_FIRE_RL_testfsm_state_fired__dreg_update = DEF_WILL_FIRE_RL_testfsm_state_fired__dreg_update;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_testfsm_state_handle_abort, 1u);
      backing.DEF_WILL_FIRE_RL_testfsm_state_handle_abort = DEF_WILL_FIRE_RL_testfsm_state_handle_abort;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_10, 1u);
      backing.DEF_WILL_FIRE___me_check_10 = DEF_WILL_FIRE___me_check_10;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_5, 1u);
      backing.DEF_WILL_FIRE___me_check_5 = DEF_WILL_FIRE___me_check_5;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_6, 1u);
      backing.DEF_WILL_FIRE___me_check_6 = DEF_WILL_FIRE___me_check_6;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_7, 1u);
      backing.DEF_WILL_FIRE___me_check_7 = DEF_WILL_FIRE___me_check_7;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_8, 1u);
      backing.DEF_WILL_FIRE___me_check_8 = DEF_WILL_FIRE___me_check_8;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE___me_check_9, 1u);
      backing.DEF_WILL_FIRE___me_check_9 = DEF_WILL_FIRE___me_check_9;
      vcd_write_val(sim_hdl, num++, DEF_message_8_BITS_143_TO_0___d75, 144u);
      backing.DEF_message_8_BITS_143_TO_0___d75 = DEF_message_8_BITS_143_TO_0___d75;
      vcd_write_val(sim_hdl, num++, DEF_message___d38, 145u);
      backing.DEF_message___d38 = DEF_message___d38;
      vcd_write_val(sim_hdl, num++, DEF_update___d78, 144u);
      backing.DEF_update___d78 = DEF_update___d78;
    }
}

void MOD_mkTestbench::vcd_prims(tVCDDumpType dt, MOD_mkTestbench &backing)
{
  INST_message.dump_VCD(dt, backing.INST_message);
  INST_pred.dump_VCD(dt, backing.INST_pred);
  INST_prediction.dump_VCD(dt, backing.INST_prediction);
  INST_testfsm_abort.dump_VCD(dt, backing.INST_testfsm_abort);
  INST_testfsm_start_reg.dump_VCD(dt, backing.INST_testfsm_start_reg);
  INST_testfsm_start_reg_1.dump_VCD(dt, backing.INST_testfsm_start_reg_1);
  INST_testfsm_start_reg_2.dump_VCD(dt, backing.INST_testfsm_start_reg_2);
  INST_testfsm_start_wire.dump_VCD(dt, backing.INST_testfsm_start_wire);
  INST_testfsm_state_can_overlap.dump_VCD(dt, backing.INST_testfsm_state_can_overlap);
  INST_testfsm_state_fired.dump_VCD(dt, backing.INST_testfsm_state_fired);
  INST_testfsm_state_fired_1.dump_VCD(dt, backing.INST_testfsm_state_fired_1);
  INST_testfsm_state_mkFSMstate.dump_VCD(dt, backing.INST_testfsm_state_mkFSMstate);
  INST_testfsm_state_overlap_pw.dump_VCD(dt, backing.INST_testfsm_state_overlap_pw);
  INST_testfsm_state_set_pw.dump_VCD(dt, backing.INST_testfsm_state_set_pw);
  INST_update.dump_VCD(dt, backing.INST_update);
}
